# Generated by Django 4.1.5 on 2023-01-23 19:47

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import utilities.json
import validity.utils.password


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("dcim", "0167_module_status"),
        ("extras", "0084_staging"),
    ]

    operations = [
        migrations.CreateModel(
            name="ComplianceSelector",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("filter_operation", models.CharField(default="AND", max_length=3)),
                ("name_filter", models.CharField(blank=True, max_length=255)),
                ("status_filter", models.CharField(blank=True, max_length=50)),
                ("dynamic_pairs", models.CharField(default="NO", max_length=20)),
                ("location_filter", models.ManyToManyField(blank=True, related_name="+", to="dcim.location")),
                ("manufacturer_filter", models.ManyToManyField(blank=True, related_name="+", to="dcim.manufacturer")),
                ("platform_filter", models.ManyToManyField(blank=True, related_name="+", to="dcim.platform")),
                ("site_filter", models.ManyToManyField(blank=True, related_name="+", to="dcim.location")),
                ("tag_filter", models.ManyToManyField(blank=True, related_name="+", to="extras.tag")),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                ("type_filter", models.ManyToManyField(blank=True, related_name="+", to="dcim.devicetype")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ComplianceTest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("expression", models.TextField()),
                ("selectors", models.ManyToManyField(related_name="tests", to="validity.complianceselector")),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GitRepo",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(blank=True, max_length=255, unique=True)),
                ("repo_url", models.CharField(max_length=255, validators=[django.core.validators.URLValidator()])),
                ("default_device_path", models.CharField(max_length=255)),
                ("default", models.BooleanField(default=False)),
                ("username", models.CharField(blank=True, max_length=255)),
                ("encrypted_password", validity.utils.password.PasswordField(blank=True, default=None, null=True)),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ConfigSerializer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(blank=True, max_length=255, unique=True)),
                ("ttp_template", models.TextField()),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ComplianceTestResult",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("passed", models.BooleanField()),
                ("explanation", models.TextField(blank=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="results", to="dcim.device"
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "test",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="validity.compliancetest",
                    ),
                ),
            ],
            options={
                "ordering": ("last_updated",),
            },
        ),
    ]
